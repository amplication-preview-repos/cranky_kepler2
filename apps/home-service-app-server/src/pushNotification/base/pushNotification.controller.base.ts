/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PushNotificationService } from "../pushNotification.service";
import { PushNotificationCreateInput } from "./PushNotificationCreateInput";
import { PushNotification } from "./PushNotification";
import { PushNotificationFindManyArgs } from "./PushNotificationFindManyArgs";
import { PushNotificationWhereUniqueInput } from "./PushNotificationWhereUniqueInput";
import { PushNotificationUpdateInput } from "./PushNotificationUpdateInput";

export class PushNotificationControllerBase {
  constructor(protected readonly service: PushNotificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PushNotification })
  async createPushNotification(
    @common.Body() data: PushNotificationCreateInput
  ): Promise<PushNotification> {
    return await this.service.createPushNotification({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PushNotification] })
  @ApiNestedQuery(PushNotificationFindManyArgs)
  async pushNotifications(
    @common.Req() request: Request
  ): Promise<PushNotification[]> {
    const args = plainToClass(PushNotificationFindManyArgs, request.query);
    return this.service.pushNotifications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PushNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pushNotification(
    @common.Param() params: PushNotificationWhereUniqueInput
  ): Promise<PushNotification | null> {
    const result = await this.service.pushNotification({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PushNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePushNotification(
    @common.Param() params: PushNotificationWhereUniqueInput,
    @common.Body() data: PushNotificationUpdateInput
  ): Promise<PushNotification | null> {
    try {
      return await this.service.updatePushNotification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PushNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePushNotification(
    @common.Param() params: PushNotificationWhereUniqueInput
  ): Promise<PushNotification | null> {
    try {
      return await this.service.deletePushNotification({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
