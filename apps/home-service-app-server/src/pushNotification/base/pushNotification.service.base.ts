/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PushNotification as PrismaPushNotification,
} from "@prisma/client";

export class PushNotificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PushNotificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pushNotification.count(args);
  }

  async pushNotifications(
    args: Prisma.PushNotificationFindManyArgs
  ): Promise<PrismaPushNotification[]> {
    return this.prisma.pushNotification.findMany(args);
  }
  async pushNotification(
    args: Prisma.PushNotificationFindUniqueArgs
  ): Promise<PrismaPushNotification | null> {
    return this.prisma.pushNotification.findUnique(args);
  }
  async createPushNotification(
    args: Prisma.PushNotificationCreateArgs
  ): Promise<PrismaPushNotification> {
    return this.prisma.pushNotification.create(args);
  }
  async updatePushNotification(
    args: Prisma.PushNotificationUpdateArgs
  ): Promise<PrismaPushNotification> {
    return this.prisma.pushNotification.update(args);
  }
  async deletePushNotification(
    args: Prisma.PushNotificationDeleteArgs
  ): Promise<PrismaPushNotification> {
    return this.prisma.pushNotification.delete(args);
  }
}
